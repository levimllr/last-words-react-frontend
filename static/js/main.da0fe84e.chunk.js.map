{"version":3,"sources":["components/Button.js","components/Definition.js","components/TotalScore.js","services/format.js","components/Word.js","containers/GameInfo.js","containers/NewGame.js","components/Hangman.js","components/WordScreen.js","components/Stat.js","containers/WordInfo.js","containers/HighScores.js","containers/GamePage.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","clickAction","btnTxt","Definition","className","text","TotalScore","totalScore","indexColor","index","score","Word","style","color","misses","length","name","GameInfo","wordArray","this","gameWords","Array","fill","key","map","gameWord","word","blank","push","slice","highScore","start","listStart","renderGameWords","React","Component","NewGame","state","userNameArray","handleClickOutside","event","target","modalOnClick","handleKeyPress","document","getElementById","classList","add","char","toLowerCase","replaceIndex","indexOf","keyCode","toUpperCase","setState","handleOnClick","includes","window","removeEventListener","handleNewPlayer","addEventListener","removeTransition","newGameButton","focus","show","id","join","Hangman","imagePath","altText","src","alt","WordScreen","status","Stat","statName","WordInfo","wordScreen","hits","wordDone","handleAttempt","bind","Object","keys","split","forEach","character","c","createWordScreen","listening","console","log","test","handleHit","handleMiss","revealScreen","handleLoss","i","handleWin","hitsDisplay","missesDisplay","condition","HighScores","formatScore","scoreString","scoreStringArray","unshift","formatIndex","highScores","username","total_score","domain","scoreUrl","GamePage","showNewGame","showHighScores","allWords","currentWord","gameOver","gameId","propertyName","remove","showModal","innerText","showScores","newGame","pop","postNewGame","fetch","then","resp","json","lowestHighScore","calculateScore","points","wordScore","game_id","word_id","win","postGameWord","fetchAll","data","method","mode","headers","body","JSON","stringify","response","gameWordResource","updateGame","url","game","definition","major_class","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da0fe84e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = props => {\n\n  return (\n    <button onClick={props.clickAction}>{props.btnTxt}</button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Definition  = props => {\n\n  return (\n    <div>\n      <h2>Definition</h2>\n      <p className={\"field definitionField\"}>{props.text}</p>\n    </div>\n  );\n};\n\nexport default Definition;\n","import React from \"react\";\n\nconst TotalScore  = props => {\n\n  return (\n    <div>\n      <h3>Total Score: {props.totalScore}</h3>\n    </div>\n  );\n};\n\nexport default TotalScore;\n","function indexColor(index) {\n  let score;\n  if (index === 0) {\n      score = 'purple';\n  } else if (index === 1) {\n      score = 'blue';\n  } else if (index === 2) {\n      score = 'green';\n  } else if (index === 3) {\n      score = 'gold';\n  } else if (index === 4) {\n      score = 'orange';\n  } else if (index === 5) {\n      score = 'red';\n  }\n  return score;\n};\n\nexport { indexColor };","import React from \"react\";\nimport { indexColor } from '../services/format';\n\nconst Word  = props => {\n\n  return <li style={{color: indexColor(props.misses.length)}}>{props.name}</li>\n};\n\nexport default Word;\n","import React from \"react\";\nimport TotalScore from \"../components/TotalScore\";\nimport Word from '../components/Word';\n\nclass GameInfo extends React.Component {\n\n  renderGameWords() {\n    let numberOfWords = 7;\n    let wordArray;\n    if (this.props.gameWords.length === 0) {\n      wordArray = Array(numberOfWords).fill([<br key={`blank`}></br>]);\n    } else {\n      wordArray = this.props.gameWords.map((gameWord) => \n        <Word key={gameWord.word} name={gameWord.word} misses={gameWord.misses} />);\n      if (wordArray.length < numberOfWords) {\n        let blank = 1;\n        while (wordArray.length < numberOfWords) {\n        wordArray.push(<br key={`blank-${blank}`}></br>);\n          blank +=1 ;\n        }; \n      };\n    };\n    return wordArray.slice(-7);\n  };\n\n  listStart() {\n    let startNumber;\n    if (this.props.gameWords.length <= 7) {\n      startNumber = 1;\n    } else {\n      startNumber = this.props.gameWords.length - 7;\n    };\n    return startNumber;\n  };\n\n  render() {\n\n    return (\n      <div>\n        <h1>{this.props.highScore ? \"High Score!\" : \"Last Words\"}</h1>\n        <ol start={this.listStart()}>\n          {this.renderGameWords()}\n        </ol>\n        <TotalScore totalScore={this.props.totalScore} />\n      </div>\n    );\n  };\n};\n\nexport default GameInfo;\n","import React from \"react\";\n\nclass NewGame extends React.Component {\n  state = {\n    userNameArray: [\"_\", \"_\", \"_\"]\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"click\", this.handleClickOutside);\n    window.addEventListener(\"keydown\", this.handleKeyPress);\n    document.getElementById(\"gameModalHeader\")\n      .addEventListener('transitionend', this.props.removeTransition);\n  };\n\n  componentDidUpdate() {\n    const newGameButton = document.getElementById(\"newGameButton\");\n    if (newGameButton) {\n      newGameButton.focus();\n    };\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener(\"click\", this.handleClickOutside);\n  };\n\n  handleClickOutside = (event) => {\n    if (event.target.className === \"modal\") {\n      this.props.modalOnClick()\n    };\n  };\n\n  handleKeyPress = (event) => {\n    document.getElementById(\"gameModalHeader\").classList.add('missing');\n    let char = event.key.toLowerCase();\n    let userNameArray = this.state.userNameArray;\n    let replaceIndex = userNameArray.indexOf(\"_\");\n    if (event.keyCode === 13) {\n        return\n    } else if (event.keyCode === 8) {\n      if (replaceIndex === -1) {\n        userNameArray[2] = \"_\";\n      } else {\n        userNameArray[replaceIndex - 1] = \"_\";\n      };\n    } else if (event.keyCode >= 65 && event.keyCode <= 90) {\n      userNameArray[replaceIndex] = char.toUpperCase();\n    };\n    this.setState({userNameArray: userNameArray});\n  };\n\n  handleOnClick = (event) => {\n    if (!this.state.userNameArray.includes(\"_\")) {\n      window.removeEventListener(\"keydown\", this.handleKeyPress);\n      this.props.handleNewPlayer(this.state.userNameArray);\n    };\n  };\n\n  render() {\n    if (!this.props.show) {\n      return null\n    } else {\n      return (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h1 className=\"modal-header\" id=\"gameModalHeader\">\n              Any last words, {this.state.userNameArray.join(\" \")} ?\n            </h1>\n            {this.state.userNameArray.includes(\"_\") ? <h3>Press any letter on your keyboard.</h3> : <button id=\"newGameButton\" onClick={this.handleOnClick}>Face your fate.</button>}\n          </div>\n        </div>\n      );\n    };\n  };\n};\n\nexport default NewGame;\n","import React from \"react\";\n\nclass Hangman extends React.Component {\n\n  componentDidMount(){\n    document.getElementById(\"scaffoldImg\")\n      .addEventListener('transitionend', this.props.removeTransition);\n  };\n\n  render() {\n\n    const imagePath = `/last-words-react-frontend/public/img/Hangman-${this.props.misses}.png`;\n    const altText = `Hangman with ${this.props.misses} of 6 misses`;\n\n    return (\n      <div>\n        <img id=\"scaffoldImg\" src={imagePath} alt={altText}></img>\n      </div>\n    );\n  };\n};\n\nexport default Hangman;\n","import React from \"react\";\n\nconst WordScreen  = props => {\n\n  return (\n    <div>\n      <h2>Word</h2>\n      <p className={\"field\"}>{props.status}</p>\n    </div>\n  );\n};\n\nexport default WordScreen;\n","import React from \"react\";\n\nconst Stat  = props => {\n\n  return (\n    <div className={\"preField\"}>\n      <h3>{props.statName}</h3>\n      <p className={\"field\"}>{props.status}</p>\n    </div>\n  );\n};\n\nexport default Stat;\n","import React from \"react\";\nimport Hangman from \"../components/Hangman\";\nimport WordScreen from \"../components/WordScreen\";\nimport Stat from \"../components/Stat\";\n\nfunction isLetter(c) {\n  return c.toLowerCase() !== c.toUpperCase();\n};\n\nfunction createWordScreen(wordArray) {\n  let wordScreen = [];\n  wordArray.forEach((character) => {\n      if (isLetter(character)) {\n          wordScreen.push('_');\n      } else {\n          wordScreen.push(character);\n      }\n  });\n  return wordScreen;\n};\n\nclass WordInfo extends React.Component {\n  state = {\n    wordScreen: [],\n    wordArray: [],\n    hits: [],\n    misses: [],\n    wordDone: false\n  };\n\n  componentDidMount() {\n    this.handleAttempt = this.handleAttempt.bind(this);\n  };\n\n  componentDidUpdate() {\n    if (Object.keys(this.props.word).length !== 0 && this.props.word.name !== this.state.wordArray.join(\"\") ) {\n      let wordArray = this.props.word.name.split(\"\");\n      let wordScreen = createWordScreen(wordArray);\n      if (this.props.listening) {\n         window.addEventListener('keypress', this.handleAttempt);\n      } else {\n         window.removeEventListener('keypress', this.handleAttempt);\n      };\n      this.setState({\n        wordScreen: wordScreen, \n        wordArray: wordArray,\n        hits: [],\n        misses: [],\n        wordDone: false\n      });\n    };\n  };\n\n  handleAttempt(event) {\n    let char = event.key.toLowerCase();\n\n    // ignore the return key\n    if (event.keyCode === 13) {\n      return\n    };\n\n    console.log(event.keyCode);\n\n    if (/[a-zA-Z]/.test(char) && this.state.wordDone === false) {\n      if (this.state.wordArray.includes(char) ) {\n        console.log(\"Hit!\");\n        this.handleHit(char);\n      } else {\n        console.log(\"Miss!\")\n        this.handleMiss(char);\n      };\n    };\n  };\n\n  handleHit(char) {\n    let hits = this.state.hits;\n    if (hits.includes(char)) {\n      return\n    } else {\n      hits.push(char);\n      this.setState({hits: hits});\n      this.revealScreen(char);\n    };\n  };\n\n  handleMiss(char) {\n    document.getElementById(\"scaffoldImg\").classList.add('missing');\n    let misses = this.state.misses;\n    if (misses.includes(char)) {\n      return\n    } else {\n      misses.push(char);\n      this.setState({misses: misses});\n    };\n    if (misses.length === 6) {\n      window.removeEventListener('keypress', this.handleAttempt);\n      this.setState({wordScreen: this.state.wordArray});\n      this.props.handleLoss();\n      return;\n    };\n  };\n\n  revealScreen(char) {\n    let wordArray = this.state.wordArray;\n    let wordScreen = this.state.wordScreen;\n    for (let i = 0; i < this.state.wordArray.length; i++) {\n      if (char === wordArray[i]) {\n          wordScreen[i] = wordArray[i];\n      };\n    };\n    this.setState({wordScreen: wordScreen});\n    if (this.state.wordArray.join(\"\") === this.state.wordScreen.join(\"\")) {\n      this.props.handleWin(this.state.misses);\n    };\n  };\n\n  render() {\n\n    let wordScreen = this.state.wordScreen.length === 0 ? <br></br> : this.state.wordScreen.join(\" \");\n    let hitsDisplay = this.state.hits.length === 0 ? <br></br> : this.state.hits.join(\" \");\n    let missesDisplay = this.state.misses.length === 0 ? <br></br> : this.state.misses.join(\" \");\n\n    return (\n      <div className=\"WordInfo\">\n        <Hangman misses={this.state.misses.length} removeTransition={this.props.removeTransition} />\n        <WordScreen status={wordScreen} />\n        <Stat statName={\"Hits\"} condition={true} status={hitsDisplay} />\n        <Stat statName={\"Misses\"} condition={false} status={missesDisplay} />\n      </div>\n    );\n  };\n};\n\nexport default WordInfo;\n","import React from \"react\";\nimport { indexColor } from '../services/format';\n\nclass HighScores extends React.Component {\n  componentDidMount() {\n    window.addEventListener(\"click\", this.handleClickOutside);\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener(\"click\", this.handleClickOutside);\n  };\n\n  handleClickOutside = (event) => {\n    if (event.target.className === \"modal\") {\n      this.props.modalOnClick()\n    };\n  };\n\n  formatScore = (score) => {\n    let scoreString = `${score}`;\n    let scoreStringArray = scoreString.split(\"\");\n    if (scoreString.length < 4) {\n        while (scoreStringArray.length < 4) {\n            scoreStringArray.unshift(\"0\");\n        };\n    };\n    scoreString = scoreStringArray.join(\"\");\n    return scoreString;\n  };\n\n  formatIndex = (index) => {\n    const rankMap = [\"0TH\", \"1ST\", \"2ND\", \"3RD\", \"4TH\", \"5TH\", \"6TH\", \"7TH\", \"8TH\", \"9TH\", \"10TH\"];\n    return rankMap[index + 1];\n  };\n\n  render() {\n    if (!this.props.show) {\n      return null\n    } else {\n      return (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h1 className=\"modal-header\" id=\"gameModalHeader\">\n              High Scores\n            </h1>\n            <ol className=\"modal-list\">\n              {this.props.highScores.map((highScore, index) => {\n                return <li className=\"modal-list-item\" style={{color: indexColor(index)}}>{this.formatIndex(index)}...{highScore.username}...{this.formatScore(highScore.total_score)} </li> \n              })}\n            </ol>\n          </div>\n        </div>\n      );\n    };\n  };\n};\n\nexport default HighScores;\n","import React from \"react\";\nimport Button from \"../components/Button\";\nimport Definition from \"../components/Definition\";\nimport GameInfo from \"./GameInfo\";\nimport NewGame from \"./NewGame\";\nimport WordInfo from \"./WordInfo\";\nimport HighScores from \"./HighScores\";\n\n// const domain = 'http://localhost:3001';\nconst domain = 'https://last-words-on-rails.herokuapp.com';\n\nlet gamesResource = '/games';\nlet wordResource = '/words/random';\nlet scoreResource = '/games/high_scores';\nlet gamesUrl = domain + gamesResource;\nlet wordUrl = domain + wordResource;\nlet scoreUrl = domain  + scoreResource;\n\nclass GamePage extends React.Component {\n  state = {\n    showNewGame: false,\n    showHighScores: false,\n    allWords: [],\n    gameWords: [],\n    currentWord: {},\n    highScores: [],\n    gameOver: true,\n    gameId: null,\n    username: \"\",\n    totalScore: 0,\n    listening: false,\n    highScore: false\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  };\n\n  componentDidUpdate() {\n    if (this.state.gameOver === true) {\n      this.fetchAll();\n      this.setState({gameOver: false});\n    };\n  };\n\n  removeTransition = (event) =>  {\n    if (event.propertyName !== 'transform') return;\n    event.target.classList.remove('missing');\n  };\n\n  showModal = (event) => {\n    console.log(\"Show modal!\");\n    this.setState({listening: false});\n    if (event.target.innerText === \"New Game\") {\n      this.setState({\n        showNewGame: true,\n        gameId: null,\n        username: \"\",\n        totalScore: 0\n      });\n    } else if (event.target.innerText === \"High Scores\") {\n      this.setState({\n        showHighScores: true\n      });\n    };\n  };\n\n  modalOnClick = () => {\n    console.log(\"Modal click!\");\n    if (this.state.showNewGame === true) {\n      this.setState({\n        showNewGame: false\n      });\n    } else if (this.state.showHighScores === true) {\n      this.setState({\n        showHighScores: false\n      });\n    };\n  };\n\n  fetchAll() {\n    fetch(wordUrl)\n      .then(resp => resp.json())\n      .then(json => this.setState({allWords: json}));\n    fetch(scoreUrl)\n      .then(resp => resp.json())\n      .then(json => this.setState({highScores: json}));\n  };\n\n  postNewGame(username) {\n    let data = {\n      username: username,\n      total_score: this.state.totalScore\n    };\n    fetch(gamesUrl, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    }).then(\n        response => response.json()\n    ).then(\n        json => this.setState({\n          gameId: json.id,\n          username: json.username\n        })\n    );\n  };\n\n  postGameWord(gameWord) {\n    // console.log(gameWord);\n    let gameWordResource = `/games/${this.state.gameId}/game_words`;\n    let url = domain + gameWordResource;\n    fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(gameWord)\n    })\n    .then(response => response.json())\n    .then(json => {\n      gameWord.score = json.score;\n      let totalScore = this.state.totalScore + gameWord.score;\n      this.setState({totalScore: totalScore});\n    })\n    .then(() => {\n      let gameWords = this.state.gameWords;\n      gameWords.push(gameWord);\n\n      let allWords = this.state.allWords;\n      let currentWord = allWords.pop();\n      this.setState({\n        allWords: allWords, \n        gameWords: gameWords, \n        currentWord: currentWord\n      });\n\n      this.updateGame();\n    });\n  };\n\n  updateGame() {\n    let url = domain + `/games/${this.state.gameId}`;\n    let data = {\n        game: {\n          id: this.state.gameId,\n          username: this.state.username,\n          total_score: this.state.totalScore\n        }\n    };\n    fetch(url, {\n        method: 'PATCH',\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    });\n  };\n\n  showScores =  () => console.log(\"HIGH SCORES!!!\");\n\n  newGame = (userNameArray) => {\n    const username = userNameArray.join(\"\");\n    this.setState({\n      showNewGame: false,\n      gameOver: true,\n      gameWords: [],\n      totalScore: 0,\n      username: username,\n      highScore: false\n    });\n    let allWords = this.state.allWords;\n    let currentWord = allWords.pop();\n    this.postNewGame(username);\n    this.setState({\n      allWords: allWords, \n      currentWord: currentWord,\n      listening: true\n    });\n  };\n\n  handleLoss = () => {\n    console.log(\"You lose.\");\n    fetch(scoreUrl)\n      .then(resp => resp.json())\n      .then(json => this.setState({highScores: json}))\n      .then(() => {\n        const lowestHighScore = this.state.highScores[this.state.highScores.length - 1].total_score\n        if (this.state.totalScore >= lowestHighScore) {\n          this.setState({highScore: true});\n        };\n      });\n  };\n\n  calculateScore = (word, misses) => {\n    let score = word.points + word.name.length - (2 * misses.length);\n    return score;\n  };\n\n  handleWin = (misses) =>  {\n    let wordScore = this.calculateScore(this.state.currentWord, misses);\n    console.log(`Word Score: ${wordScore}`);\n    let gameWord = {\n      game_id: this.state.gameId,\n      word_id: this.state.currentWord.id,\n      word: this.state.currentWord.name,\n      misses: misses.join(\"\"),\n      win: true\n    };\n    this.postGameWord(gameWord);\n  };\n\n  render() {\n\n    let definition = Object.keys(this.state.currentWord).length === 0 ? <br></br> : (this.state.currentWord.major_class + \"  \" + this.state.currentWord.definition);\n\n    return (\n      <div className=\"row\">\n        <div className={\"column column-left\"}>\n          <GameInfo \n            totalScore={this.state.totalScore} \n            gameWords={this.state.gameWords} \n            highScore={this.state.highScore}\n          />\n          <Definition text={definition}/>\n          <Button btnTxt={\"High Scores\"} clickAction={this.showModal} />\n          <Button btnTxt={\"New Game\"} clickAction={this.showModal}/>\n        </div>\n        <div className={\"column column-right\"}>\n          <WordInfo \n            word={this.state.currentWord} \n            handleLoss={this.handleLoss} \n            handleWin={this.handleWin}\n            listening={this.state.listening}\n            removeTransition={this.removeTransition}\n          />\n        </div>\n        {this.state.showNewGame ? <NewGame show={this.state.showNewGame} handleNewPlayer={this.newGame} modalOnClick={this.modalOnClick} removeTransition={this.removeTransition} /> : \"\" }\n        {this.state.showHighScores ? <HighScores highScores={this.state.highScores} show={this.state.showHighScores} modalOnClick={this.modalOnClick} /> : \"\" }\n      </div>\n    );\n  };\n};\n\nexport default GamePage;\n","import React from 'react';\nimport GamePage from './containers/GamePage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GamePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}